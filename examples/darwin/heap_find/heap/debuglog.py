typedef unsigned natural_t;
typedef uintptr_t vm_size_t;
typedef uintptr_t vm_address_t;
typedef natural_t task_t;
typedef int kern_return_t;
#define KERN_SUCCESS 0
typedef void (*range_callback_t)(task_t task, void *baton, unsigned type, uintptr_t ptr_addr, uintptr_t ptr_size);

#define NUM_STACKS 3
#define STACK_RED_ZONE_SIZE 128
typedef struct thread_stack_t { uint64_t tid, base, size; } thread_stack_t;
thread_stack_t stacks[NUM_STACKS];
stacks[0].tid  = 0x4124d;
stacks[0].base = 0x7fff5fbf8570;
stacks[0].size = 0x7248;
stacks[1].tid  = 0x41298;
stacks[1].base = 0x70000c87e9c8;
stacks[1].size = 0x68;
stacks[2].tid  = 0x4129f;
stacks[2].base = 0x70000c985ef8;
stacks[2].size = 0x68;
#define NUM_SEGMENTS 218
typedef struct segment_range_t { uint64_t base; uint32_t size; } segment_range_t;
segment_range_t segments[NUM_SEGMENTS];
segments[0].base = 0x10006e000;
segments[0].size = 0x3000;
segments[1].base = 0x100178000;
segments[1].size = 0x37000;
segments[2].base = 0x101c18000;
segments[2].size = 0x5f000;
segments[3].base = 0x7fffc9172000;
segments[3].size = 0x6000;
segments[4].base = 0x7fffc90ed000;
segments[4].size = 0x8000;
segments[5].base = 0x7fffc90dc000;
segments[5].size = 0x1000;
segments[6].base = 0x7fffc91f1000;
segments[6].size = 0xbd000;
segments[7].base = 0x7fffc5bae000;
segments[7].size = 0x149000;
segments[8].base = 0x7fffcd661000;
segments[8].size = 0x8b000;
segments[9].base = 0x7fffc5fb0000;
segments[9].size = 0x104000;
segments[10].base = 0x7fffc917e000;
segments[10].size = 0x21000;
segments[11].base = 0x7fffc92fd000;
segments[11].size = 0x1000;
segments[12].base = 0x7fffc68cd000;
segments[12].size = 0x42000;
segments[13].base = 0x7fffc90f5000;
segments[13].size = 0x2000;
segments[14].base = 0x7fffc9301000;
segments[14].size = 0x1000;
segments[15].base = 0x7fffc9302000;
segments[15].size = 0x2000;
segments[16].base = 0x7fffc9304000;
segments[16].size = 0x2000;
segments[17].base = 0x7fffc9306000;
segments[17].size = 0x1000;
segments[18].base = 0x7fffc9307000;
segments[18].size = 0x9000;
segments[19].base = 0x104489000;
segments[19].size = 0x24000;
segments[20].base = 0x7fffc9333000;
segments[20].size = 0x1000;
segments[21].base = 0x7fffc9334000;
segments[21].size = 0x1000;
segments[22].base = 0x7fffc9336000;
segments[22].size = 0x1000;
segments[23].base = 0x7fffc9337000;
segments[23].size = 0x1000;
segments[24].base = 0x7fffc9338000;
segments[24].size = 0x1000;
segments[25].base = 0x7fffc9339000;
segments[25].size = 0x1000;
segments[26].base = 0x7fffc933a000;
segments[26].size = 0x2000;
segments[27].base = 0x7fffc933c000;
segments[27].size = 0x1000;
segments[28].base = 0x7fffc933d000;
segments[28].size = 0x9000;
segments[29].base = 0x7fffc9346000;
segments[29].size = 0x1000;
segments[30].base = 0x7fffc9347000;
segments[30].size = 0x1000;
segments[31].base = 0x7fffc9348000;
segments[31].size = 0x2000;
segments[32].base = 0x7fffc934a000;
segments[32].size = 0x1000;
segments[33].base = 0x7fffc934b000;
segments[33].size = 0x3000;
segments[34].base = 0x7fffc934e000;
segments[34].size = 0x3000;
segments[35].base = 0x7fffc9351000;
segments[35].size = 0x1000;
segments[36].base = 0x7fffc9352000;
segments[36].size = 0x3000;
segments[37].base = 0x7fffc9355000;
segments[37].size = 0x4000;
segments[38].base = 0x7fffc9359000;
segments[38].size = 0x2000;
segments[39].base = 0x7fffc935b000;
segments[39].size = 0x1000;
segments[40].base = 0x7fffc935c000;
segments[40].size = 0x1000;
segments[41].base = 0x1044ce000;
segments[41].size = 0x4000;
segments[42].base = 0x7fffc9361000;
segments[42].size = 0x1000;
segments[43].base = 0x7fffc9362000;
segments[43].size = 0x1000;
segments[44].base = 0x7fffc9363000;
segments[44].size = 0x1000;
segments[45].base = 0x7fffc9364000;
segments[45].size = 0x2000;
segments[46].base = 0x7fffc9366000;
segments[46].size = 0x1000;
segments[47].base = 0x7fffc9367000;
segments[47].size = 0x6000;
segments[48].base = 0x7fffc5887000;
segments[48].size = 0x13e000;
segments[49].base = 0x7fffc5e35000;
segments[49].size = 0x1000;
segments[50].base = 0x7fffc5e18000;
segments[50].size = 0x15000;
segments[51].base = 0x7fffc5e6e000;
segments[51].size = 0x31000;
segments[52].base = 0x7fffc5e9f000;
segments[52].size = 0xd000;
segments[53].base = 0x7fffc5eac000;
segments[53].size = 0xb000;
segments[54].base = 0x7fffc5e13000;
segments[54].size = 0x5000;
segments[55].base = 0x7fffc5e36000;
segments[55].size = 0x38000;
segments[56].base = 0x7fffc5e2d000;
segments[56].size = 0x8000;
segments[57].base = 0x7fffc5eb7000;
segments[57].size = 0xb000;
segments[58].base = 0x7fffc90e9000;
segments[58].size = 0x1000;
segments[59].base = 0x7fffc90ea000;
segments[59].size = 0x2000;
segments[60].base = 0x7fffc6115000;
segments[60].size = 0xa000;
segments[61].base = 0x7fffc69da000;
segments[61].size = 0xb000;
segments[62].base = 0x7fffc92c9000;
segments[62].size = 0x7000;
segments[63].base = 0x7fffc92f1000;
segments[63].size = 0xb000;
segments[64].base = 0x7fffc91e7000;
segments[64].size = 0xa000;
segments[65].base = 0x7fffc9178000;
segments[65].size = 0x1000;
segments[66].base = 0x7fffc9335000;
segments[66].size = 0x1000;
segments[67].base = 0x7fffc90ac000;
segments[67].size = 0x1000;
segments[68].base = 0x7fffc92b0000;
segments[68].size = 0x3000;
segments[69].base = 0x7fffc90fa000;
segments[69].size = 0x1000;
segments[70].base = 0x7fffc90da000;
segments[70].size = 0x1000;
segments[71].base = 0x7fffc92af000;
segments[71].size = 0x1000;
segments[72].base = 0x7fffc92f0000;
segments[72].size = 0x1000;
segments[73].base = 0x7fffc90ec000;
segments[73].size = 0x1000;
segments[74].base = 0x7fffc91a1000;
segments[74].size = 0x1000;
segments[75].base = 0x7fffc5f44000;
segments[75].size = 0x2000;
segments[76].base = 0x7fffc63c1000;
segments[76].size = 0x1000;
segments[77].base = 0x7fffc8312000;
segments[77].size = 0x2000;
segments[78].base = 0x7fffc9088000;
segments[78].size = 0x1000;
segments[79].base = 0x7fffc90e6000;
segments[79].size = 0x1000;
segments[80].base = 0x7fffc91a0000;
segments[80].size = 0x1000;
segments[81].base = 0x7fffc90a7000;
segments[81].size = 0x1000;
segments[82].base = 0x7fffc8cf2000;
segments[82].size = 0x1000;
segments[83].base = 0x7fffc91a3000;
segments[83].size = 0x40000;
segments[84].base = 0x7fffc5cf7000;
segments[84].size = 0x45000;
segments[85].base = 0x7fffc5ed8000;
segments[85].size = 0x24000;
segments[86].base = 0x7fffc613c000;
segments[86].size = 0x1c000;
segments[87].base = 0x7fffc573d000;
segments[87].size = 0x8000;
segments[88].base = 0x7fffc57aa000;
segments[88].size = 0xd000;
segments[89].base = 0x7fffc57b7000;
segments[89].size = 0x9000;
segments[90].base = 0x7fffc57c0000;
segments[90].size = 0x2000;
segments[91].base = 0x7fffc57c2000;
segments[91].size = 0x7000;
segments[92].base = 0x7fffc57c9000;
segments[92].size = 0x2000;
segments[93].base = 0x7fffc57cb000;
segments[93].size = 0x3000;
segments[94].base = 0x7fffc52b5000;
segments[94].size = 0xf000;
segments[95].base = 0x7fffc52cf000;
segments[95].size = 0x1000;
segments[96].base = 0x7fffc52c6000;
segments[96].size = 0x1000;
segments[97].base = 0x7fffc52cd000;
segments[97].size = 0x1000;
segments[98].base = 0x7fffc52d0000;
segments[98].size = 0x1000;
segments[99].base = 0x7fffc52c7000;
segments[99].size = 0x5000;
segments[100].base = 0x7fffc52c4000;
segments[100].size = 0x2000;
segments[101].base = 0x7fffc52cc000;
segments[101].size = 0x1000;
segments[102].base = 0x7fffc52ce000;
segments[102].size = 0x1000;
segments[103].base = 0x7fffc574d000;
segments[103].size = 0x43000;
segments[104].base = 0x7fffc5790000;
segments[104].size = 0xa000;
segments[105].base = 0x7fffc615d000;
segments[105].size = 0x1000;
segments[106].base = 0x7fffc6160000;
segments[106].size = 0x4000;
segments[107].base = 0x7fffc615e000;
segments[107].size = 0x1000;
segments[108].base = 0x7fffc6158000;
segments[108].size = 0x1000;
segments[109].base = 0x7fffc6159000;
segments[109].size = 0x4000;
segments[110].base = 0x7fffc615f000;
segments[110].size = 0x1000;
segments[111].base = 0x7fffc90f8000;
segments[111].size = 0x2000;
segments[112].base = 0x7fffc6e68000;
segments[112].size = 0x55000;
segments[113].base = 0x7fffc611f000;
segments[113].size = 0x2000;
segments[114].base = 0x7fffc82dd000;
segments[114].size = 0x2000;
segments[115].base = 0x7fffc9165000;
segments[115].size = 0x8000;
segments[116].base = 0x7fffc622a000;
segments[116].size = 0x2000;
segments[117].base = 0x7fffc60c3000;
segments[117].size = 0x6000;
segments[118].base = 0x7fffc92bc000;
segments[118].size = 0x2000;
segments[119].base = 0x7fffc917c000;
segments[119].size = 0x2000;
segments[120].base = 0x7fffc7eb2000;
segments[120].size = 0x10000;
segments[121].base = 0x7fffc917b000;
segments[121].size = 0x1000;
segments[122].base = 0x7fffc6449000;
segments[122].size = 0x6000;
segments[123].base = 0x7fffc7373000;
segments[123].size = 0x1000;
segments[124].base = 0x7fffc6440000;
segments[124].size = 0x9000;
segments[125].base = 0x7fffc690f000;
segments[125].size = 0x15000;
segments[126].base = 0x7fffc5b1e000;
segments[126].size = 0x3000;
segments[127].base = 0x7fffc57ce000;
segments[127].size = 0x28000;
segments[128].base = 0x7fffc8069000;
segments[128].size = 0x14000;
segments[129].base = 0x7fffc91a2000;
segments[129].size = 0x1000;
segments[130].base = 0x7fffc90a8000;
segments[130].size = 0x1000;
segments[131].base = 0x7fffc90f7000;
segments[131].size = 0x1000;
segments[132].base = 0x7fffc5b28000;
segments[132].size = 0x7e000;
segments[133].base = 0x7fffc748f000;
segments[133].size = 0x2000;
segments[134].base = 0x7fffc6934000;
segments[134].size = 0x1000;
segments[135].base = 0x7fffc92fc000;
segments[135].size = 0x1000;
segments[136].base = 0x7fffc91e3000;
segments[136].size = 0x4000;
segments[137].base = 0x1001cd000;
segments[137].size = 0x1000;
segments[138].base = 0x1001da000;
segments[138].size = 0x2000;
segments[139].base = 0x7fffc53ed000;
segments[139].size = 0x34b000;
segments[140].base = 0x7fffcd5dd000;
segments[140].size = 0x84000;
segments[141].base = 0x7fffc67d9000;
segments[141].size = 0x31000;
segments[142].base = 0x7fffc8732000;
segments[142].size = 0xc000;
segments[143].base = 0x7fffc8d5d000;
segments[143].size = 0x45000;
segments[144].base = 0x7fffc7776000;
segments[144].size = 0x3000;
segments[145].base = 0x7fffc8a56000;
segments[145].size = 0x21000;
segments[146].base = 0x7fffc90db000;
segments[146].size = 0x1000;
segments[147].base = 0x7fffc7788000;
segments[147].size = 0x17000;
segments[148].base = 0x7fffc77af000;
segments[148].size = 0xa000;
segments[149].base = 0x7fffc59ce000;
segments[149].size = 0x4d000;
segments[150].base = 0x7fffc5a36000;
segments[150].size = 0x1000;
segments[151].base = 0x7fffc75c9000;
segments[151].size = 0x146000;
segments[152].base = 0x7fffc8542000;
segments[152].size = 0x1e000;
segments[153].base = 0x7fffc7cf8000;
segments[153].size = 0x7000;
segments[154].base = 0x7fffc64ce000;
segments[154].size = 0x2000;
segments[155].base = 0x7fffc5d3c000;
segments[155].size = 0xb0000;
segments[156].base = 0x7fffc6f47000;
segments[156].size = 0x12000;
segments[157].base = 0x7fffc5a20000;
segments[157].size = 0x10000;
segments[158].base = 0x7fffc8d21000;
segments[158].size = 0x7000;
segments[159].base = 0x7fffc6347000;
segments[159].size = 0x27000;
segments[160].base = 0x7fffc90e7000;
segments[160].size = 0x1000;
segments[161].base = 0x7fffc6450000;
segments[161].size = 0x1000;
segments[162].base = 0x7fffc801e000;
segments[162].size = 0x1000;
segments[163].base = 0x7fffc5efc000;
segments[163].size = 0x6000;
segments[164].base = 0x7fffc90ad000;
segments[164].size = 0x26000;
segments[165].base = 0x7fffc826e000;
segments[165].size = 0x2b000;
segments[166].base = 0x7fffc78b0000;
segments[166].size = 0x205000;
segments[167].base = 0x7fffc6434000;
segments[167].size = 0xc000;
segments[168].base = 0x7fffc6461000;
segments[168].size = 0x1000;
segments[169].base = 0x7fffc6452000;
segments[169].size = 0x1000;
segments[170].base = 0x7fffc6453000;
segments[170].size = 0x1000;
segments[171].base = 0x7fffc6454000;
segments[171].size = 0x1000;
segments[172].base = 0x7fffc644f000;
segments[172].size = 0x1000;
segments[173].base = 0x7fffc6451000;
segments[173].size = 0x1000;
segments[174].base = 0x7fffc7766000;
segments[174].size = 0x4000;
segments[175].base = 0x7fffc8a1e000;
segments[175].size = 0x2d000;
segments[176].base = 0x7fffc8023000;
segments[176].size = 0x9000;
segments[177].base = 0x7fffc8723000;
segments[177].size = 0x7000;
segments[178].base = 0x7fffc6e4b000;
segments[178].size = 0x5000;
segments[179].base = 0x7fffc5f02000;
segments[179].size = 0x1a000;
segments[180].base = 0x7fffc770f000;
segments[180].size = 0x1e000;
segments[181].base = 0x7fffc60ee000;
segments[181].size = 0x27000;
segments[182].base = 0x7fffc7744000;
segments[182].size = 0x22000;
segments[183].base = 0x7fffc5b21000;
segments[183].size = 0x7000;
segments[184].base = 0x7fffc5ba6000;
segments[184].size = 0x8000;
segments[185].base = 0x7fffc8020000;
segments[185].size = 0x3000;
segments[186].base = 0x7fffc7779000;
segments[186].size = 0x1000;
segments[187].base = 0x7fffc77ab000;
segments[187].size = 0x4000;
segments[188].base = 0x7fffc75c4000;
segments[188].size = 0x5000;
segments[189].base = 0x7fffc8bee000;
segments[189].size = 0x1a000;
segments[190].base = 0x7fffc6e50000;
segments[190].size = 0x3000;
segments[191].base = 0x7fffc8af3000;
segments[191].size = 0x2000;
segments[192].base = 0x7fffc71e3000;
segments[192].size = 0x3000;
segments[193].base = 0x104623000;
segments[193].size = 0x1000;
segments[194].base = 0x104657020;
segments[194].size = 0x1;
segments[195].base = 0x104659000;
segments[195].size = 0xf3;
segments[196].base = 0x104657030;
segments[196].size = 0x53;
segments[197].base = 0x104657090;
segments[197].size = 0x8;
segments[198].base = 0x104659100;
segments[198].size = 0x32;
segments[199].base = 0x1046570a0;
segments[199].size = 0x8;
segments[200].base = 0x104657100;
segments[200].size = 0x1;
segments[201].base = 0x104659140;
segments[201].size = 0xd4;
segments[202].base = 0x104657110;
segments[202].size = 0x90;
segments[203].base = 0x1046571a0;
segments[203].size = 0x8;
segments[204].base = 0x104659220;
segments[204].size = 0x36;
segments[205].base = 0x1046571b0;
segments[205].size = 0x8;
segments[206].base = 0x104657270;
segments[206].size = 0x1;
segments[207].base = 0x104659260;
segments[207].size = 0x21c;
segments[208].base = 0x104657280;
segments[208].size = 0x56;
segments[209].base = 0x1046572e0;
segments[209].size = 0x8;
segments[210].base = 0x104659480;
segments[210].size = 0x30;
segments[211].base = 0x1046572f0;
segments[211].size = 0x8;
segments[212].base = 0x104657300;
segments[212].size = 0x1;
segments[213].base = 0x1046594b0;
segments[213].size = 0x8b8;
segments[214].base = 0x104657510;
segments[214].size = 0x223;
segments[215].base = 0x104657310;
segments[215].size = 0x8;
segments[216].base = 0x104659d70;
segments[216].size = 0x30;
segments[217].base = 0x104657320;
segments[217].size = 0x8;
typedef struct callback_baton_t {
    range_callback_t callback;
    unsigned num_matches;
    $malloc_match matches[2]; // Two items so they can be NULL terminated
    void *ptr;
} callback_baton_t;
range_callback_t range_callback = [](task_t task, void *baton, unsigned type, uintptr_t ptr_addr, uintptr_t ptr_size) -> void {
    callback_baton_t *lldb_info = (callback_baton_t *)baton;
    if (lldb_info->num_matches == 0) {
        uint8_t *p = (uint8_t *)lldb_info->ptr;
        uint8_t *lo = (uint8_t *)ptr_addr;
        uint8_t *hi = lo + ptr_size;
        if (lo <= p && p < hi) {
            lldb_info->matches[lldb_info->num_matches].addr = (void*)ptr_addr;
            lldb_info->matches[lldb_info->num_matches].size = ptr_size;
            lldb_info->matches[lldb_info->num_matches].offset = p - lo;
            lldb_info->matches[lldb_info->num_matches].type = type;
            lldb_info->num_matches = 1;
        }
    }
};
callback_baton_t baton = { range_callback, 0, {0}, (void *)0x10481b360 };
baton.matches[0].addr = 0;
baton.matches[1].addr = 0;
#define MALLOC_PTR_IN_USE_RANGE_TYPE 1
typedef struct vm_range_t {
    vm_address_t	address;
    vm_size_t		size;
} vm_range_t;
typedef kern_return_t (*memory_reader_t)(task_t task, vm_address_t remote_address, vm_size_t size, void **local_memory);
typedef void (*vm_range_recorder_t)(task_t task, void *baton, unsigned type, vm_range_t *range, unsigned size);
typedef struct malloc_introspection_t {
    kern_return_t (*enumerator)(task_t task, void *, unsigned type_mask, vm_address_t zone_address, memory_reader_t reader, vm_range_recorder_t recorder); /* enumerates all the malloc pointers in use */
} malloc_introspection_t;
typedef struct malloc_zone_t {
    void *reserved1[12];
    struct malloc_introspection_t	*introspect;
} malloc_zone_t;
memory_reader_t task_peek = [](task_t task, vm_address_t remote_address, vm_size_t size, void **local_memory) -> kern_return_t {
    *local_memory = (void*) remote_address;
    return KERN_SUCCESS;
};
vm_address_t *zones = 0;
unsigned int num_zones = 0;task_t task = 0;
kern_return_t err = (kern_return_t)malloc_get_all_zones (task, task_peek, &zones, &num_zones);
if (KERN_SUCCESS == err)
{
    for (unsigned int i=0; i<num_zones; ++i)
    {
        const malloc_zone_t *zone = (const malloc_zone_t *)zones[i];
        if (zone && zone->introspect)
            zone->introspect->enumerator (task,
                                          &baton,
                                          MALLOC_PTR_IN_USE_RANGE_TYPE,
                                          (vm_address_t)zone,
                                          task_peek,
                                          [] (task_t task, void *baton, unsigned type, vm_range_t *ranges, unsigned size) -> void
                                          {
                                              range_callback_t callback = ((callback_baton_t *)baton)->callback;
                                              for (unsigned i=0; i<size; ++i)
                                              {
                                                  callback (task, baton, type, ranges[i].address, ranges[i].size);
                                              }
                                          });
    }
}
#ifdef NUM_STACKS
// Call the callback for the thread stack ranges
for (uint32_t i=0; i<NUM_STACKS; ++i) {
    range_callback(task, &baton, 8, stacks[i].base, stacks[i].size);
    if (STACK_RED_ZONE_SIZE > 0) {
        range_callback(task, &baton, 16, stacks[i].base - STACK_RED_ZONE_SIZE, STACK_RED_ZONE_SIZE);
    }
}
#endif
#ifdef NUM_SEGMENTS
// Call the callback for all segments
for (uint32_t i=0; i<NUM_SEGMENTS; ++i)
    range_callback(task, &baton, 32, segments[i].base, segments[i].size);
#endif
baton.matches
